infType = "seeded",
runtype = "test_",
name_out = paste0("test_", "seeded", "_", 0.02, '-', 0.05, '-'),
pth = getwd(),
save_runs = TRUE,
save_plots = TRUE,
test_mode = TRUE,
test_birth = TRUE,
test_death_n = TRUE,
test_death_h = TRUE,
test_disease = FALSE,
verbose = 0,
n.cores = floor(detectCores() * (3 / 4))
)
}
initialize_cluster <- function(n.cores) {
cl <- makeCluster(n.cores)
registerDoParallel(cl)
clusterEvalQ(cl, {
library(deSolve)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(grid)
library(rstudioapi)
library(foreach)
library(doParallel)
library(RColorBrewer)
library(scales)
})
clusterExport(cl, c("initialize_environment","setup_parameters","create_directories",
"initialize_cluster","run_simulation","generate_plots","save_results",
"parameter_set_wl","SEI_model_full", "SEI_model","wildlife_model",
"alpha","eta","p2","eta_hunt","wl_model_CTMC.exe","wl_model_DTMC.exe"))
cl
}
create_directories <- function() {
if (!dir.exists("data")) {
dir.create("data")
}
if (!dir.exists("results")) {
dir.create("results")
}
}
run_simulation <- function(size, parameters) {
setwd(parameters$pth)
models_res <- vector(mode = "list", length = 3)
pars <- parameter_set_wl(
k = size,
scenario = parameters$infType,
initial_exposed = parameters$pct * size,
SS_prop = parameters$prop_superSpreader,
start_quarter = parameters$seedQuarter,
test = parameters$test_mode,
birth = parameters$test_birth,
death_h = parameters$test_death_h,
death_n = parameters$test_death_n,
disease = parameters$test_disease,
verbose = parameters$verbose
)
X0_full <- c(S = as.integer(pars["S_0"]), E = as.integer(pars["E1_0"]), I = as.integer(pars["I_0"]),
sS = as.integer(pars["SuperS_0"]), sE = as.integer(pars["SuperE1_0"]), sI = as.integer(pars["SuperI_0"]))
tic <- Sys.time()
out <- ode(func = SEI_model_full, y = X0_full, times = parameters$times, parms = pars, method = "rk4") %>%
as.data.frame()
toc <- Sys.time()
print(toc - tic)
out$N <- out$S + out$E + out$I + out$sS + out$sE + out$sI
data <- out %>% gather(variable, value, -time)
data$value[is.nan(data$value)] <- 0
data$value[which(data$value < 0)] <- 0
initial_state <- data.frame(S_0 = pars["S_0"], E1_0 = pars["E1_0"], I_0 = pars["I_0"], SuperS_0 = pars["SuperS_0"], SuperE1_0 = pars["SuperE1_0"], SuperI_0 = pars["SuperI_0"])
population_parameters <- data.frame(K = pars["K"], eta_hunt = pars["eta_hunt"], eta_nat = pars["eta_nat"], theta = pars["theta"], gamma = pars["gamma"], alpha_max = pars["alpha_max"], ksi = pars["ksi"], omega = pars["omega"])
disease_parameters <- data.frame(beta = pars["beta"], area = pars["area"], p1 = pars["p1"], p2_q1 = pars["p2_q1"], p2_q2 = pars["p2_q2"], p2_q3 = pars["p2_q3"], p2_q4 = pars["p2_q4"], phi = pars["phi"], sigma1_mean = pars["sigma1_mean"], sigma1_rate = pars["sigma1_rate"])
param_vals <- data.frame(merge(population_parameters, disease_parameters))
tic <- Sys.time()
sto_out <- wildlife_model(n_reps = parameters$reps, parameters = param_vals, initial_state = initial_state, nyears = parameters$years, seed_quarter = as.integer(pars["start_q"]), verbose = parameters$verbose, batch_name = "test")
toc <- Sys.time()
print(toc - tic)
data_sto <- sto_out[, c("rep", "tstep", "time", "N", "S", "SS_S", "E1", "SS_E1", "I", "SS_I")] %>% pivot_longer(cols = c("N", "S", "SS_S", "E1", "SS_E1", "I", "SS_I"), names_to = "variable", values_to = "value")
models_res[[1]] <- as.data.frame(data)
models_res[[2]] <- as.data.frame(sto_out)
models_res[[3]] <- as.data.frame(data_sto)
models_res
}
generate_plots <- function(models_res, parameters, size) {
sto_by_class <- split(as.data.frame(models_res[[3]]), as.data.frame(models_res[[3]])$variable)
det_by_class <- split(as.data.frame(models_res[[1]]), as.data.frame(models_res[[1]])$variable)
SEIcols <- RColorBrewer::brewer.pal(11, "Spectral")[c(1, 2, 4, 5, 8, 9, 10)]
Nplot <- ggplot() +
geom_line(data = sto_by_class[["N"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .9) +
geom_line(data = det_by_class[["N"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[7]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
Splot <- ggplot() +
geom_line(data = sto_by_class[["S"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .7) +
geom_line(data = det_by_class[["S"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[6]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
Eplot <- ggplot() +
geom_line(data = sto_by_class[["E1"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .7) +
geom_line(data = det_by_class[["E"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[4]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
Iplot <- ggplot() +
geom_line(data = sto_by_class[["I"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .7) +
geom_line(data = det_by_class[["I"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[2]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
SSSplot <- ggplot() +
geom_line(data = sto_by_class[["SS_S"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .6) +
geom_line(data = det_by_class[["sS"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[5]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
ESSplot <- ggplot() +
geom_line(data = sto_by_class[["SS_E1"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .6) +
geom_line(data = det_by_class[["sE"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[3]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
ISSplot <- ggplot() +
geom_line(data = sto_by_class[["SS_I"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .6) +
geom_line(data = det_by_class[["sI"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[1]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
print(ggarrange(Splot, SSSplot, Eplot, ESSplot, Iplot, ISSplot, ncol = 2, nrow = 3))
print(Nplot)
if (parameters$save_plots) {
setwd("results")
jpeg(filename = paste0("Rplot_class_", parameters$name_out, size, '-', Sys.Date(), ".jpeg"))
print(ggarrange(Splot, SSSplot, Eplot, ESSplot, Iplot, ISSplot, ncol = 2, nrow = 3))
dev.off()
jpeg(filename = paste0("Rplot_N_", parameters$name_out, size, '-', Sys.Date(), ".jpeg"))
print(Nplot)
dev.off()
setwd(parameters$pth)
}
list(Splot, SSSplot, Eplot, ESSplot, Iplot, ISSplot, Nplot)
}
save_results <- function(models_res, parameters, size) {
if (parameters$save_runs) {
save(models_res, file = paste0('data/', parameters$name_out, size, '-', Sys.Date(), '.RData'))
}
}
run_pipeline <- function() {
initialize_environment()
parameters <- setup_parameters()
create_directories()
cl <- initialize_cluster(parameters$n.cores)
foreach(i = 1:length(parameters$sizes)) %dopar% {
size <- as.integer(parameters$sizes[i])
models_res <- run_simulation(size, parameters)
plots <- generate_plots(models_res, parameters, size)
save_results(models_res, parameters, size)
}
stopCluster(cl)
}
initialize_environment()
parameters <- setup_parameters()
create_directories()
i
size <- as.integer(parameters$sizes[i])
models_res <- run_simulation(size, parameters)
getwd()
setwd(parameters$pth)
models_res <- vector(mode = "list", length = 3)
pars <- parameter_set_wl(
k = size,
scenario = parameters$infType,
initial_exposed = parameters$pct * size,
SS_prop = parameters$prop_superSpreader,
start_quarter = parameters$seedQuarter,
test = parameters$test_mode,
birth = parameters$test_birth,
death_h = parameters$test_death_h,
death_n = parameters$test_death_n,
disease = parameters$test_disease,
verbose = parameters$verbose
)
X0_full <- c(S = as.integer(pars["S_0"]), E = as.integer(pars["E1_0"]), I = as.integer(pars["I_0"]),
sS = as.integer(pars["SuperS_0"]), sE = as.integer(pars["SuperE1_0"]), sI = as.integer(pars["SuperI_0"]))
tic <- Sys.time()
out <- ode(func = SEI_model_full, y = X0_full, times = parameters$times, parms = pars, method = "rk4") %>%
as.data.frame()
toc <- Sys.time()
print(toc - tic)
out$N <- out$S + out$E + out$I + out$sS + out$sE + out$sI
data <- out %>% gather(variable, value, -time)
data$value[is.nan(data$value)] <- 0
data$value[which(data$value < 0)] <- 0
initial_state <- data.frame(S_0 = pars["S_0"], E1_0 = pars["E1_0"], I_0 = pars["I_0"], SuperS_0 = pars["SuperS_0"], SuperE1_0 = pars["SuperE1_0"], SuperI_0 = pars["SuperI_0"])
population_parameters <- data.frame(K = pars["K"], eta_hunt = pars["eta_hunt"], eta_nat = pars["eta_nat"], theta = pars["theta"], gamma = pars["gamma"], alpha_max = pars["alpha_max"], ksi = pars["ksi"], omega = pars["omega"])
disease_parameters <- data.frame(beta = pars["beta"], area = pars["area"], p1 = pars["p1"], p2_q1 = pars["p2_q1"], p2_q2 = pars["p2_q2"], p2_q3 = pars["p2_q3"], p2_q4 = pars["p2_q4"], phi = pars["phi"], sigma1_mean = pars["sigma1_mean"], sigma1_rate = pars["sigma1_rate"])
param_vals <- data.frame(merge(population_parameters, disease_parameters))
tic <- Sys.time()
sto_out <- wildlife_model(n_reps = parameters$reps, parameters = param_vals, initial_state = initial_state, nyears = parameters$years, seed_quarter = as.integer(pars["start_q"]), verbose = parameters$verbose, batch_name = "test")
toc <- Sys.time()
print(toc - tic)
getwd()
run_simulation <- function(size, parameters) {
# setwd(parameters$pth)
models_res <- vector(mode = "list", length = 3)
pars <- parameter_set_wl(
k = size,
scenario = parameters$infType,
initial_exposed = parameters$pct * size,
SS_prop = parameters$prop_superSpreader,
start_quarter = parameters$seedQuarter,
test = parameters$test_mode,
birth = parameters$test_birth,
death_h = parameters$test_death_h,
death_n = parameters$test_death_n,
disease = parameters$test_disease,
verbose = parameters$verbose
)
X0_full <- c(S = as.integer(pars["S_0"]), E = as.integer(pars["E1_0"]), I = as.integer(pars["I_0"]),
sS = as.integer(pars["SuperS_0"]), sE = as.integer(pars["SuperE1_0"]), sI = as.integer(pars["SuperI_0"]))
tic <- Sys.time()
out <- ode(func = SEI_model_full, y = X0_full, times = parameters$times, parms = pars, method = "rk4") %>%
as.data.frame()
toc <- Sys.time()
print(toc - tic)
out$N <- out$S + out$E + out$I + out$sS + out$sE + out$sI
data <- out %>% gather(variable, value, -time)
data$value[is.nan(data$value)] <- 0
data$value[which(data$value < 0)] <- 0
initial_state <- data.frame(S_0 = pars["S_0"], E1_0 = pars["E1_0"], I_0 = pars["I_0"], SuperS_0 = pars["SuperS_0"], SuperE1_0 = pars["SuperE1_0"], SuperI_0 = pars["SuperI_0"])
population_parameters <- data.frame(K = pars["K"], eta_hunt = pars["eta_hunt"], eta_nat = pars["eta_nat"], theta = pars["theta"], gamma = pars["gamma"], alpha_max = pars["alpha_max"], ksi = pars["ksi"], omega = pars["omega"])
disease_parameters <- data.frame(beta = pars["beta"], area = pars["area"], p1 = pars["p1"], p2_q1 = pars["p2_q1"], p2_q2 = pars["p2_q2"], p2_q3 = pars["p2_q3"], p2_q4 = pars["p2_q4"], phi = pars["phi"], sigma1_mean = pars["sigma1_mean"], sigma1_rate = pars["sigma1_rate"])
param_vals <- data.frame(merge(population_parameters, disease_parameters))
tic <- Sys.time()
sto_out <- wildlife_model(n_reps = parameters$reps, parameters = param_vals, initial_state = initial_state, nyears = parameters$years, seed_quarter = as.integer(pars["start_q"]), verbose = parameters$verbose, batch_name = "test")
toc <- Sys.time()
print(toc - tic)
data_sto <- sto_out[, c("rep", "tstep", "time", "N", "S", "SS_S", "E1", "SS_E1", "I", "SS_I")] %>% pivot_longer(cols = c("N", "S", "SS_S", "E1", "SS_E1", "I", "SS_I"), names_to = "variable", values_to = "value")
models_res[[1]] <- as.data.frame(data)
models_res[[2]] <- as.data.frame(sto_out)
models_res[[3]] <- as.data.frame(data_sto)
models_res
}
generate_plots <- function(models_res, parameters, size) {
sto_by_class <- split(as.data.frame(models_res[[3]]), as.data.frame(models_res[[3]])$variable)
det_by_class <- split(as.data.frame(models_res[[1]]), as.data.frame(models_res[[1]])$variable)
SEIcols <- RColorBrewer::brewer.pal(11, "Spectral")[c(1, 2, 4, 5, 8, 9, 10)]
Nplot <- ggplot() +
geom_line(data = sto_by_class[["N"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .9) +
geom_line(data = det_by_class[["N"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[7]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
Splot <- ggplot() +
geom_line(data = sto_by_class[["S"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .7) +
geom_line(data = det_by_class[["S"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[6]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
Eplot <- ggplot() +
geom_line(data = sto_by_class[["E1"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .7) +
geom_line(data = det_by_class[["E"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[4]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
Iplot <- ggplot() +
geom_line(data = sto_by_class[["I"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .7) +
geom_line(data = det_by_class[["I"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[2]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
SSSplot <- ggplot() +
geom_line(data = sto_by_class[["SS_S"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .6) +
geom_line(data = det_by_class[["sS"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[5]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
ESSplot <- ggplot() +
geom_line(data = sto_by_class[["SS_E1"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .6) +
geom_line(data = det_by_class[["sE"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[3]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
ISSplot <- ggplot() +
geom_line(data = sto_by_class[["SS_I"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .6) +
geom_line(data = det_by_class[["sI"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[1]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
print(ggarrange(Splot, SSSplot, Eplot, ESSplot, Iplot, ISSplot, ncol = 2, nrow = 3))
print(Nplot)
if (parameters$save_plots) {
setwd("results")
jpeg(filename = paste0("Rplot_class_", parameters$name_out, size, '-', Sys.Date(), ".jpeg"))
print(ggarrange(Splot, SSSplot, Eplot, ESSplot, Iplot, ISSplot, ncol = 2, nrow = 3))
dev.off()
jpeg(filename = paste0("Rplot_N_", parameters$name_out, size, '-', Sys.Date(), ".jpeg"))
print(Nplot)
dev.off()
setwd(parameters$pth)
}
list(Splot, SSSplot, Eplot, ESSplot, Iplot, ISSplot, Nplot)
}
save_results <- function(models_res, parameters, size) {
if (parameters$save_runs) {
save(models_res, file = paste0('data/', parameters$name_out, size, '-', Sys.Date(), '.RData'))
}
}
initialize_environment()
parameters <- setup_parameters()
getwd()
####################
## Initialization ##
####################
initialize_environment <- function() {
rm(list = ls())
source(file = "bTBwl_func.R")
library(deSolve)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(grid)
library(rstudioapi)
library(foreach)
library(doParallel)
library(RColorBrewer)
library(scales)
}
setup_parameters <- function() {
list(
years = 3,
times = seq(from = 0, to = 3 * 12, by = 12 / 365),
seedQuarter = 1,
prop_superSpreader = 0.05,
pct = 0.02,
verbose = 0,
reps = 50,
sizes = c(10, 50, 100, 250, 500),
infType = "seeded",
runtype = "test_",
name_out = paste0("test_", "seeded", "_", 0.02, '-', 0.05, '-'),
pth = getwd(),
save_runs = TRUE,
save_plots = TRUE,
test_mode = TRUE,
test_birth = TRUE,
test_death_n = TRUE,
test_death_h = TRUE,
test_disease = FALSE,
verbose = 0,
n.cores = floor(detectCores() * (3 / 4))
)
}
initialize_cluster <- function(n.cores) {
cl <- makeCluster(n.cores)
registerDoParallel(cl)
clusterEvalQ(cl, {
library(deSolve)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(grid)
library(rstudioapi)
library(foreach)
library(doParallel)
library(RColorBrewer)
library(scales)
})
clusterExport(cl, c("initialize_environment","setup_parameters","create_directories",
"initialize_cluster","run_simulation","generate_plots","save_results",
"parameter_set_wl","SEI_model_full", "SEI_model","wildlife_model",
"alpha","eta","p2","eta_hunt","wl_model_CTMC.exe","wl_model_DTMC.exe"))
cl
}
create_directories <- function() {
if (!dir.exists("data")) {
dir.create("data")
}
if (!dir.exists("results")) {
dir.create("results")
}
}
run_simulation <- function(size, parameters) {
# setwd(parameters$pth)
models_res <- vector(mode = "list", length = 3)
pars <- parameter_set_wl(
k = size,
scenario = parameters$infType,
initial_exposed = parameters$pct * size,
SS_prop = parameters$prop_superSpreader,
start_quarter = parameters$seedQuarter,
test = parameters$test_mode,
birth = parameters$test_birth,
death_h = parameters$test_death_h,
death_n = parameters$test_death_n,
disease = parameters$test_disease,
verbose = parameters$verbose
)
X0_full <- c(S = as.integer(pars["S_0"]), E = as.integer(pars["E1_0"]), I = as.integer(pars["I_0"]),
sS = as.integer(pars["SuperS_0"]), sE = as.integer(pars["SuperE1_0"]), sI = as.integer(pars["SuperI_0"]))
tic <- Sys.time()
out <- ode(func = SEI_model_full, y = X0_full, times = parameters$times, parms = pars, method = "rk4") %>%
as.data.frame()
toc <- Sys.time()
print(toc - tic)
out$N <- out$S + out$E + out$I + out$sS + out$sE + out$sI
data <- out %>% gather(variable, value, -time)
data$value[is.nan(data$value)] <- 0
data$value[which(data$value < 0)] <- 0
initial_state <- data.frame(S_0 = pars["S_0"], E1_0 = pars["E1_0"], I_0 = pars["I_0"], SuperS_0 = pars["SuperS_0"], SuperE1_0 = pars["SuperE1_0"], SuperI_0 = pars["SuperI_0"])
population_parameters <- data.frame(K = pars["K"], eta_hunt = pars["eta_hunt"], eta_nat = pars["eta_nat"], theta = pars["theta"], gamma = pars["gamma"], alpha_max = pars["alpha_max"], ksi = pars["ksi"], omega = pars["omega"])
disease_parameters <- data.frame(beta = pars["beta"], area = pars["area"], p1 = pars["p1"], p2_q1 = pars["p2_q1"], p2_q2 = pars["p2_q2"], p2_q3 = pars["p2_q3"], p2_q4 = pars["p2_q4"], phi = pars["phi"], sigma1_mean = pars["sigma1_mean"], sigma1_rate = pars["sigma1_rate"])
param_vals <- data.frame(merge(population_parameters, disease_parameters))
tic <- Sys.time()
sto_out <- wildlife_model(n_reps = parameters$reps, parameters = param_vals, initial_state = initial_state, nyears = parameters$years, seed_quarter = as.integer(pars["start_q"]), verbose = parameters$verbose, batch_name = "test")
toc <- Sys.time()
print(toc - tic)
data_sto <- sto_out[, c("rep", "tstep", "time", "N", "S", "SS_S", "E1", "SS_E1", "I", "SS_I")] %>% pivot_longer(cols = c("N", "S", "SS_S", "E1", "SS_E1", "I", "SS_I"), names_to = "variable", values_to = "value")
models_res[[1]] <- as.data.frame(data)
models_res[[2]] <- as.data.frame(sto_out)
models_res[[3]] <- as.data.frame(data_sto)
models_res
}
generate_plots <- function(models_res, parameters, size) {
sto_by_class <- split(as.data.frame(models_res[[3]]), as.data.frame(models_res[[3]])$variable)
det_by_class <- split(as.data.frame(models_res[[1]]), as.data.frame(models_res[[1]])$variable)
SEIcols <- RColorBrewer::brewer.pal(11, "Spectral")[c(1, 2, 4, 5, 8, 9, 10)]
Nplot <- ggplot() +
geom_line(data = sto_by_class[["N"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .9) +
geom_line(data = det_by_class[["N"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[7]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
Splot <- ggplot() +
geom_line(data = sto_by_class[["S"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .7) +
geom_line(data = det_by_class[["S"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[6]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
Eplot <- ggplot() +
geom_line(data = sto_by_class[["E1"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .7) +
geom_line(data = det_by_class[["E"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[4]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
Iplot <- ggplot() +
geom_line(data = sto_by_class[["I"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .7) +
geom_line(data = det_by_class[["I"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[2]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
SSSplot <- ggplot() +
geom_line(data = sto_by_class[["SS_S"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .6) +
geom_line(data = det_by_class[["sS"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[5]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
ESSplot <- ggplot() +
geom_line(data = sto_by_class[["SS_E1"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .6) +
geom_line(data = det_by_class[["sE"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[3]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
ISSplot <- ggplot() +
geom_line(data = sto_by_class[["SS_I"]], aes(x = time, y = value, color = variable, group = rep), size = 1, alpha = .6) +
geom_line(data = det_by_class[["sI"]], aes(x = time, y = value), size = 1) +
scale_color_manual(values = SEIcols[1]) +
scale_y_continuous(limits = c(0, NA)) +
scale_x_continuous(breaks = seq(0, parameters$years * 12, 12), limits = c(0, parameters$years * 12))
print(ggarrange(Splot, SSSplot, Eplot, ESSplot, Iplot, ISSplot, ncol = 2, nrow = 3))
print(Nplot)
if (parameters$save_plots) {
setwd("results")
jpeg(filename = paste0("Rplot_class_", parameters$name_out, size, '-', Sys.Date(), ".jpeg"))
print(ggarrange(Splot, SSSplot, Eplot, ESSplot, Iplot, ISSplot, ncol = 2, nrow = 3))
dev.off()
jpeg(filename = paste0("Rplot_N_", parameters$name_out, size, '-', Sys.Date(), ".jpeg"))
print(Nplot)
dev.off()
setwd(parameters$pth)
}
list(Splot, SSSplot, Eplot, ESSplot, Iplot, ISSplot, Nplot)
}
save_results <- function(models_res, parameters, size) {
if (parameters$save_runs) {
save(models_res, file = paste0('data/', parameters$name_out, size, '-', Sys.Date(), '.RData'))
}
}
run_pipeline <- function() {
initialize_environment()
parameters <- setup_parameters()
create_directories()
cl <- initialize_cluster(parameters$n.cores)
foreach(i = 1:length(parameters$sizes)) %dopar% {
size <- as.integer(parameters$sizes[i])
models_res <- run_simulation(size, parameters)
plots <- generate_plots(models_res, parameters, size)
save_results(models_res, parameters, size)
}
stopCluster(cl)
}
system("g++ -L/usr/lib/x86_64-linux-gnu bTB_wildlifeModel_DTMC.cpp -lgsl -lgslcblas -lm -o wl_model_DTMC.exe")
system("g++ -L/usr/lib/x86_64-linux-gnu bTB_wildlifeModel_CTMC.cpp -lgsl -lgslcblas -lm -o wl_model_CTMC.exe")
initialize_environment()
parameters <- setup_parameters()
create_directories()
i
size <- as.integer(parameters$sizes[i])
models_res <- run_simulation(size, parameters)
